name: Deploy to AWS App Runner

on:
  push:
    branches: 
      - main
      - develop
    paths:
      - 'src/**'
      - 'package*.json'
      - 'Dockerfile'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - dev2
          - uat1
          - uat2
          - uat3
          - prd

env:
  AWS_REGION: ap-northeast-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set environment variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEPLOY_ENV=prd" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_ENV
          fi
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ai-navi-slack-bot-ecr-${{ env.DEPLOY_ENV }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Push to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Update App Runner Service
        run: |
          # Find App Runner service ARN
          SERVICE_ARN=$(aws apprunner list-services \
            --query "ServiceSummaryList[?ServiceName=='ai-navi-slack-bot-${{ env.DEPLOY_ENV }}'].ServiceArn" \
            --output text)
          
          if [ ! -z "$SERVICE_ARN" ]; then
            echo "Triggering deployment for service: $SERVICE_ARN"
            aws apprunner start-deployment --service-arn $SERVICE_ARN
            
            # Wait for deployment to start
            sleep 10
            
            # Check deployment status
            STATUS=$(aws apprunner describe-service \
              --service-arn $SERVICE_ARN \
              --query "Service.Status" \
              --output text)
            
            echo "Deployment status: $STATUS"
          else
            echo "⚠️ App Runner service not found for environment: ${{ env.DEPLOY_ENV }}"
            echo "Please ensure the infrastructure is deployed first using:"
            echo "cd ../ai-navi-infrastructure && ./scripts/deploy-slack-bot.sh ${{ env.DEPLOY_ENV }}"
          fi

      - name: Post deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful for ${{ env.DEPLOY_ENV }} environment"
          else
            echo "❌ Deployment failed for ${{ env.DEPLOY_ENV }} environment"
          fi